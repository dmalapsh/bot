<?
include 'settings.php';
function create_photo($src){
    global $token;
	$request_params = array( 
    "peer_id" => 137038675,
	'access_token' => $token, 
	'v' => '5.21'); 
	$get_params = http_build_query($request_params); 
	$response = json_decode(file_get_contents('https://api.vk.com/method/photos.getMessagesUploadServer?'.$get_params))->response; 
    $url = $response->upload_url;
	$curl_file = curl_file_create(__DIR__ . '/'.$src, 'mimetype' , 'image.jpeg');
	 
	$ch = curl_init($url);  
	curl_setopt($ch, CURLOPT_POST, 1);  
	curl_setopt($ch, CURLOPT_POSTFIELDS, array('photo' => $curl_file));
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
	curl_setopt($ch, CURLOPT_HEADER, false);
	$res = json_decode(curl_exec($ch));
	curl_close($ch);	
	$request_params = array( 
    "photo" => $res->photo,
    "server" =>$res->server,
    "hash" =>$res->hash,
	'access_token' => $token, 
	'v' => '5.21'); 
	
	$get_params = http_build_query($request_params); 
	$photo = json_decode(file_get_contents('https://api.vk.com/method/photos.saveMessagesPhoto?'.$get_params))->response[0];
	return "photo".$photo->owner_id."_".$photo->id."_".$photo->access_key;
}


function set_status($text){

	global $token;
	$request_params = array( 
		'type' => 'text',
		'access_token' => $token, 
		'code' => 'return {
				title": "","
			    "text": "–ü–æ–¥–ø–∏—Å–∞–Ω–æ —É–∂–µ –±–æ–ª–µ–µ 300 —á–µ–ª–æ–≤–µ–∫. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!"
			};', 
	'v' => '5.40'); 
	
	$get_params = http_build_query($request_params); 
	echo file_get_contents('https://api.vk.com/method/appWidgets.update?'. $get_params); 
}

function send_mass($text, $user_id, $attach = "",$btn = false){
	switch ($btn) {
		case -1:
			$keyboard ='{"buttons":[]}';
			break;
		case 1:
			$keyboard = '{"buttons":[
	        [{"action":{"type":"text","label":"üè¢ 1 –∫–æ—Ä–ø—É—Å"},"color":"negative"},{"action":{"type":"text","label":"üè¢ 2 –∫–æ—Ä–ø—É—Å"},"color":"negative"}], 
	        [{"action":{"type":"text","label":"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω. —Ä–∞—Å–ø–∏—Å."},"color":"positive"}]
	        ],"one_time":false}';
			break;
		case 2:
			$keyboard = '{"buttons":[
	        [{"action":{"type":"text","label":"üè¢ 1 –∫–æ—Ä–ø—É—Å"},"color":"negative"},{"action":{"type":"text","label":"üè¢ 2 –∫–æ—Ä–ø—É—Å"},"color":"negative"}],
	        [{"action":{"type":"text","label":"–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"},"color":"positive"}] 
	        ],"one_time":false}';
			break;
		case 3:
			$keyboard = '{"buttons":[
	        [{"action":{"type":"text","label":"üè¢ 1 –∫–æ—Ä–ø—É—Å"},"color":"negative"},{"action":{"type":"text","label":"üè¢ 2 –∫–æ—Ä–ø—É—Å"},"color":"negative"}]
	        ],"one_time":false}';
				break;
	}

		if	($attach == "") {
			unset($attach);
		}else{
			$attach = implode(',', $attach);
		}
		if ($text == ""){
			unset($text);}
		
		
	global $token;
 		$request_params = array( 
		'message' => $text, 
		'user_ids' => $user_id, 
		'attachment'  => $attach,
		'keyboard' =>$keyboard,
		'access_token' => $token, 
		'v' => '5.9'); 
		
		$get_params = http_build_query($request_params); 
		file_get_contents('https://api.vk.com/method/messages.send?'. $get_params); 


		
		if (strpos($user_id, ',')===false) {
		    $type_id = 'peer_id';
		}else{
			$type_id = 'user_ids';
		}

		$method = 'messages.send';
		$url = sprintf( 'https://api.vk.com/method/%s', $method);
		$ch = curl_init();
		curl_setopt_array( $ch, array(
		    CURLOPT_POST    => TRUE,            // —ç—Ç–æ –∏–º–µ–Ω–Ω–æ POST –∑–∞–ø—Ä–æ—Å!
		    CURLOPT_RETURNTRANSFER  => TRUE,    // –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç –í–ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
		    CURLOPT_SSL_VERIFYPEER  => FALSE,   // –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å https —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
		    CURLOPT_SSL_VERIFYHOST  => FALSE,
		    CURLOPT_POSTFIELDS      => array(   // –∑–¥–µ—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:
		        $type_id   => $user_id,
		        'message' => $text, 
		        'attachment'  => $attach,
		        'keyboard' =>$keyboard,
		        'access_token' => $token,
		        'v' => '5.38' 
		    ),
		    CURLOPT_URL             => $url,    // –≤–µ–± –∞–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞
		));
		$rest = curl_exec($ch); // –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏ –≤—Å—ë –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
		curl_close( $ch);
		return $rest;
 	};
